# 디자인패턴

- 라이브러리
    - 공통으로 사용될 수 있는 특정한 기능들을 모듈화 한 것
    - 폴더명, 파일명 등에 대한 규칙 없음
    - 프레임워크에 비해 자유로움
- 프레임워크
    - 공통으로 사용될 수 있는 특정한 기능들을 모듈화 한 것
    - 폴더명, 파일명 등에 대한 규칙 존재
    - 라이브러리에 비해 좀 더 엄격

## 1.1 디자인패턴

- 의미
    - 프로그램 설계 시 발생했던 문제점들을 객체 간 상호 관계 등을 이용하여 해결할 수 있도록 ‘규약’ 형태로 만들어 놓은 것

### 1.1.1 싱글톤 패턴

- 의미
    - 하나의 클래스에 오직 하나의 인스턴스만 가지는 패턴
- 특징
    - 데이터 베이스 연결 모듈에 많이 사용
    - 하나의 인스턴스 - 해당 인스턴스를 다른 모듈들이 공유하며 사용
    - 장점 : 인스턴스를 생성할 때 드는 비용이 줄어들음
    - 단점 : 의존성이 높아짐

- 단점
    - TDD(Test Driven Development) 할 때 걸림돌
        - 단위 테스트를 주로 하는데, 단위 테스트는 테스트가 서로 독립적이어 함 + 테스트를 어떤 순서로든 실행할 수 있어야 함
        - but, 싱글톤 패턴에서는 미리 생성된 ‘하나’ 인스턴스 임으로, 각 테스트마다 ‘독립적’인 인스턴스 생성 어려움
- 해결방법
    - 의존성 주입 (DI, Dependency Injection)
        - ⚠️ 의존성 : A가 B에 의존성이 있다는 것은, B의 변경 사항에 대해 A 또한 변해야한다는 것을 의미
    - 모듈 간의 결합을 조금 더 느슨하게 만들어 해결

- 의존성 주입 (DI)
    - 의미
        - 중간에 의존성 주입자가 이 부분을 가로채 메인 모듈이 간접적으로 의존성을 주입하는 방식
        - 메인모듈 - 의존성 주입자 → 하위 모듈
    - 장점
        - 모듈들을 쉽게 교체할 수 있는 구조
        - 테스팅하기 쉽고 마이그레이션하기도 수월
        - 모듈 간의 관계들이 조금 더 명확해짐
    - 단점
        - 클래스 수가 늘어나 복잡성 증가
        - 약간의 런타임 패널티 존재
    - 원칙
        - 상위 모듈은 하위 모듈에서 어떠한 것도 가져오지 않아야 함
        - 둘 다 추상화에 의존해야 함
        - 추상화는 세부 사항에 의존하지 말아야 함

### 1.1.2 팩토리 패턴

- 의미
    - 객체를 사용하는 코드에서 객체 생성 부분을 떼어내 추상화한 패턴
    - 상위 클래스가 중요한 뼈대를 결정하고, 하위 클래스에서 객체 생성에 관한 구체적인 내용을 결정하는 패턴
- 특징
    - 상위 클래스와 하위 클래스가 분리
    - 느슨한 결합을 가짐 → 유연성을 가짐
    - 상위 클래스에서는 인스턴스 생성 방식에 대해 전혀 알 필요 없음
    - 객체 생성 로직이 따로 떼어져 있음
    - 코드 리팩토링 시 유지 보수성이 증가 됨

> ENUM : 상수의 집합을 정의할 때 사용되는 타입. 메서드를 집어 넣어 관리할 수도 있음. enum을 기반으로 상수 집합을 관리한다면, 코드를 리팩터링할 때 상수 집합에 대한 로직 수성 지 이 부분만 수정하면 된다는 장점이 있음. 존질적으로 thread safe 하기 때문에 싱글톤 패턴을 만들 때 도움이 됨
> 

### 1.1.3 전략 패턴 (strategy pattern)

- 의미
    - 정책 패턴이라고도 함
    - 객체의 행위를 바꾸고 싶은 경우 ‘직접’ 수정하지 않음
    - ‘캡슐화한 알고리즘’(전략)을 컨텍스트 안에서 바꿔주면서 상호 교체가 가능하게 만드는 패턴
- 예시
    - 무엇인가를 구매할 때, 네이버페이, 카카오 페이 등 다양한 방법으로 결제하는 것

> 컨텍스트 : 개발자가 어떠한 작업을 완료하는데 필요한 모든 관련 정보
> 

### 1.1.4 옵저버 패턴 (observer pattern)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f69bb3c0-f8c4-4a9f-8619-5886546a97b2/Untitled.jpeg)

- 의미
    - 주체가 어떤 객체의 상태 변화가 있을 때 마다 옵저버에게 알려주는 패턴
        - 주체 : 어떤 객체의 상태변화 보고 있는 관찰자
        - 알려주는 방법 : 메서드 등
        - 옵저버 : 상태 변화에 따라 추가 변화 사항이 생기는 객체들
    - 주체와 객체를 따로 두지 않고 상태가 변경되는 객체를 기반으로 구축하기도 함
- 예시
    - 트위터
    - 이벤트 기반 시스템에 사용
    - MVC 패턴에도 사용
        - Model에 변경사항이 생겨 update() 메서드로 View(옵저버)에 알려주고 이를 기반으로 컨트롤러가 작동

⚠️ 상속과 구현

- 상속
    - 자식 클래스가 부모 클래스의 메서드 등을 상속받아 사용. 자식 클래스에서 추가 및 확장을 할 수 있음. 재사용성, 중복성의 최소화
- 구현
    - 부모 인터페이스를 자식 클래스에서 재정의하여 구현하는 것. 반드시 부모 클래스의 메서드를 재정의하여 구현해야 함

### 1.1.5 프록시 패턴과 패록시 서버

- 프록시 패턴
    - 대상 객체에 접근하기 전, 그 접근에 대한 흐름을 가로채 대상 객체 앞단의 인터페이스 역할을 하는 패턴
    - 객체의 속성, 변환 등을 보완
    - 보안, 데이터 검증, 캐싱, 로깅에 사용
- 프록시 서버
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/70155349-70b0-478c-a37b-1e0a8c234771/Untitled.jpeg)
    
- 서버와 클라이언트 사이에서 클라이언트가 자신을 통해 다른 네트워크 서비스에 간접적으로 접속할 수 있게 해주는 응용 프로그램
- 예시
    - nginx
        - 비동기 이벤트 기반의 구조와 다수의 연결을 효과적으로 처리 가능한 웹 서버
    - CloudFlare
        - 분산된 서버를 통해 어떠한 시스템의 콘텐츠 전달을 빠르게 할 수 있는 CDN 서비스
        - 웹 서버 앞단에 프록시 서버를 두어 DDOS 공격 방어나, https 구축에 사용
        - 의심스러운 트래픽인지 먼저 판단해 일정 부분을 막아주는 역할

> 버퍼 오버플로우 : 데이터가 메모리 공간을 벗어나는 경우
> 

> gzip 압축 : DEFLATE 알고리즘을 기반으로 한 압축 기술
> 

> DDOS 공격 : 짧은 기간 동안 네트워크에 많은 요청을 보내 네트워크를 마비시켜 웹 사이트의 가용성을 방해하는 사이버 공격 유형
> 

> HTTPS 구축 : 인증서를 기반으로 구축하는 것
> 

> CDN(Content Delivery Network) : 각 사용자가 인터넷에 접속하는 곳과 가까운 곳에서 콘텐츠를 캐싱 또는 배포하는 서버 네트워크
> 

- CORS 와 FE의 프록시 서버
    - CORS(Cross-Origin Resource Sharing)
    - 서버가 웹 브라우저에서 리소스를 로드할 때 다른 origin 을 통해 로드하지 못하게 하는 http header rlqks apzjsla

> origin : 프로토콜 + 호스트 이름 + 포트의 조합
> 

> 127.0.0.1 : 루프백 IP. 본인 PC 서버의 IP
> 

### 1.1.6 이터레이터 패턴 (iterator pattern)

- 의미
    - iterator 를 사용하여 컬렉션 요소에 접근하는 패턴
    - 순회할 수 있는 여러 가지 자료형의 구조와는 상관없이, 하나의 인터페이스로 순회 가능
- 이터러블한 객체
    - 반복 가능한 객체로 배열을 일반화한 객체

### 1.1.7 노출모듈 패턴 (revealing module pattern)

- 즉시 실행 함수를 통해 접근 제어자를 만드는 패턴

### 1.1.8 MVC 패턴

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2366c1ba-8ded-4470-8929-11e9bf52632f/Untitled.jpeg)

- 의미
    - Model, View, Controller 로 이루어진 패턴
        - model
            - 데이터베이스, 상수, 변수 등을 의미
        - View
            - 사용자 인터페이스 요소
            - 사용자가 볼 수 있는 화면
        - Controller
            - 하나 이상의 모델과 하나 이상의 뷰를 잇는 다리 역할
            - 이벤트 등 메인 로직 담당
            - 모델과 뷰의 생명주기 관리
- 특징
    - 애플리케이션의 구성 요소를 세가지 역할로 구분
    - 프로세스에서 각각의 구성 요소에만 집중해서 개발할 수 있음
- 장점과 단점
    - 장점 : 재사용성과 확장성이 용이하다는 장점
    - 단점 : 애플리케이션이 복잡해질수록 모델과 뷰의 관계가 복잡해짐
- 예시
    - spring

### 1.1.9 MVP 패턴

- 의미
    - Controller → Presenter 로 교체된 패턴
    - 뷰와 프레젠터는 일대일 관계
    - MVC 패턴보다 더 강한 결합을 지님

### 1.1.10 MVVM 패턴

- 의미
    - Controller → View Model 로 바뀐 패턴
    - View model :  뷰를 더 추상화 한 계층
- 특징
    - MVC 패턴과는 다르게 커맨드와 데이터 바인딩을 가짐
    - 뷰와 뷰모델 사이의 양방향 데이터 바인딩 지원
    - UI 를 별도의 코드 수정 없이 재사용 가능
    - 단위 테스팅하기 쉬움
- 예시
    - Vue.js
        - 반응형이 특징인 프론트엔드 프레임워크
        - 함수를 사용하지 않고 값 대입만으로도 변수가 변경됨

> 커맨드 : 여러가지 요소에 대한 처리를 하나의 액션으로 처리할 수 있게 하는 기법
> 

> 데이터 바인딩 : 화면에 보이는 데이터와 웹 브라우저의 메모리 데이터를 일치시키는 기법. 뷰모델을 변경하면 뷰가 변경됨
>
