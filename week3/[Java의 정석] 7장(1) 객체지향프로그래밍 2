## 상속

1. 상속의 정의와 장점
    
    상속 : 기존 클래스 재사용하여 새로운 클래스 작성
    
    - 코드의 재사용성 높임 / 코드 중복 제거
    - 생성자와 초기화 블록 상속되지 않음 → 멤버만 상속
    - 자손 클래스의 멤버개수 → 조상 클래스보다 많거나 같음

1. 클래스간의 관계 
    - 포함관계 : 클래스간의 포함관계를 맺어주는 것 = 한 클래스의 멤버변수 = 다른 클래스 타입의 참조변수를 선언하는 것
    
    ```java
    class Point{
    		int x;
    		int y;
    }
    
    class Circle{
    		Point c = new Point();
    		int r;
    }
    ```
    
    - 상속 관계 : ~은 ~이다 (is - a)
    - 포함관게 : ~은 ~을 가지고 있다 (has - a)

1. 단일상속
    
    자바는 단일 상속만 허용함
    
    - 다중상속의 문제점 해결하기 위해 다중상속의 장점 포기
    - 클래스 관계가 명확
    - 코드 더 신뢰할 수 있게 만들어줌

1. object 클래스 - 모든 클래스의 조상
    
    모든 클래스 상속 계층도의 최상위에 있는 조상클래스
    
    - 다른 클래스로부터 상속받지 않는 모든 클래스들 자동으로 object 클래스 상속받게 함

## 오버라이딩

1. 오버라이딩 정의와 조건
    
     : 조상클래스로부터 상속받은 메서드의 내용을 변경하는 것
    
    <aside>
    💡 자손클래스에서 오버라이딩하는 메서드는 조상클래스의 메서드와
    1. 이름이 같아야 됨
    2. 매개변수가 같아야 됨
    3. 반환타입이 같아야 됨
    
    </aside>
    
    - 접근제어자와 예외의 경우
        1. 접근제어자는 조상클래스의 메서드보다 좁은 범위로 변경 할 수 없다.
        2. 조상 클래스의 메서드보다 많은 수의 예외를 선언할 수 없다.
        3. 인스턴스메서드를 static메서드로 또는 그 반대로 변경할 수 없다.
        
2. 오버로딩 vs 오버라이딩
    - 오버로딩 : 기존에 없는 새로운 메서드를 정의하는 것(new)
    - 오버라이딩 : 상속받은 메서드의 내용을 변경하는 것(change, modify)

1. super, super()
    - super :
        - 자손클래스에서 조상클래스로부터 상속받은 멤버를 참조하는데 사용하는 참조변수
        - 상속받은 멤버와 자신의 클래스에 정의된 이름이 같을 때 super를 붙여서 구별할 수 있음
    - super()
        - 조상클래스의 생성자를 호출하는데 사용
        - Object 클래스를 제외한 모든 클래스의 생성자 첫 줄에 생성자 this() 또는 super()를 호출해야 함
    

## 패키지와 import

1. 패키지란?
    
    클래스의 묶음
    
    - 하나의 소스파일에는 첫 번째 문장으로 단 한번의 패키지 선언만을 허용한다.
    - 모든 클래스는 반드시 하나의 패키지의 속해야 한다.
    - 패키지는 점(.)을 구분자로 하여 계층구조로 구성할 수 있다.
    - 패키지는 물리적으로 클래스 파일(.class)을 포함하는 하나의 디렉토리이다.

1. 패키지의 선언
    
    ```java
    package 패키지명 ;
    ```
    
2. import 문
    - 사용하고자 하는 클래스의 패키지를 미리 명시해주면 소스코드에 사용되는 클래스이름에서 패키지명은 생략할 수 있음
    - 컴파일 시 컴파일러는 import문을 통해 소스파일에 사용된 클래스들의 패키지를 알아 낸 다음, 모든 클래스이름 앞에 패키지명을 붙여 줌

1. import문의 선언
    - package다음, 클래스 선언문 이전에 위치
    - 여러 번 선언할 수 있음
    - '*'을 사용하면, 컴파일러가 패키지에서 일치하는 클래스이름을 찾아 컴파일 시에 적용시킴
    
    선언법
    
    ```java
    import 패키지명.클래스명;
    
    or
    
    import 패키지명.*;
    ```
    
2. static import문
    - static멤버를 호출할 때 클래스 이름을 생략할 수 있음
    - import 다음 static을 붙임
