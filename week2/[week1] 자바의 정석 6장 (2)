## 4. 오버로딩

### 오버로딩

1. 오버로딩이란?
    
    한 클래스 내애서 같은 이름의 메서드 여러개 정의하는 것
    
2. 오버로딩 조건
    - 메서드 명이 같아야 한다
    - 매개변수의 개수 또는 타입이 달라야 한다
    - 반환 타입은 오버로딩 구현에 영향을 주지 않는다
    
    매개변수가 다르면 서로 구별됨
    
3. 오버로딩 예
    
    `println()` : 다양한 타입, 개수의 매개변수 받아 다른 작용함
    
4. 오버로딩 장점
    - 코드의 중복을 줄여줌
    - 메서드의 이름을 확일화 함
    

## 5. 생성자

### 생성자

1. 생성자란?
    
    인스턴스 생성 시 호출되는 인스턴스 초기화 메서드
    
    - 인스턴스 초기화
    - 인스터스 생성시 실행되어야 할 작업 함
2. 생성자의 조건
    - 생성자의 이름은 클래스 명과 같아야 함
    - 생성자는 리턴값이 없음
3. 인스턴스 생성 수행 과정
    - 연산자 new에 의해 메모리에 클래스 인스턴스 생성됨
    - 생성자가 호출되어 수행됨
    - new의 결과로 생성된 인스턴스의 주소과 반환 → 참조변수 c에 저장됨
4. 기본생성자
    
    컴파일러에 의해 자동으로 추가되는 생성자
    
    - 매개변수가 있는 생성자
        
        인스턴스 생성 후 멤버 필드 선언하기 보단 생성자의 매개변수에 넣어 초기화 하는 것이 더 나음
        
    - 생성자에서 다른 생성자 호출하기
        - 생성자의 이름으로 클래스 이름 대신 this 호출
        - 한 생성자에서 다른 생성자 호출 시 첫줄에서만 호출 가능
        
        this : 인스턴스 자신을 가리키는 참조변수 /  모든 인스턴스 메서드에서 지역변수로 숨겨진 채 존재
        
        this() : 생성자, 같은 클래스의 다른 생성자 호출 시 사용
        

<aside>
💡 **인스턴스 생성시 결정사항**
1. 클래스 : 어떤 클래스의 인스턴스를 생성할 것인가
2. 생성자 : 선택한 클래스의 어떤 생성자로 인스턴스 생성할 것인가

</aside>

## 6. 변수의 초기화

- 변수 선언하고 처음으로 값 저장 하는 것
- 멤버변수는 기본값으로 자료형에 맞게 초기화 됨
- 지역변수는 사용전 반드시 초기화

### 명시적 초기화

변수 선언과 동시에 초기화 하는 것

### 초기화 블럭

반복문, 조건문, 예외처리 등 자유롭게 사용 → 명시적 초기화로 부족한 경우 사용

- 클래스 초기화 블럭
    
    : 클래스 변수의 복잡한 초기화에 사용됨
    
    - 인스턴스 초기화 블럭 앞에 static 붙이기
    - 클래스가 메모리에 처음 로딩될 때 한번만 수행
- 인스턴스 초기화 블럭
    
    : 인스턴스 변수의 복잡한 초기화에 사용됨
    
    - 클래스 내에 블럭{}을 만들고 그안에 코드 작성
    - 생성자와 같이 인스턴스 생성 할 때 마다 수행됨
