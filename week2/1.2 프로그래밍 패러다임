## 1.2 프로그래밍 패러다임

- 프로그래밍 패러다임
    - 프로그래머에게 프로그래밍의 관점을 갖게 해주는 역할을 하는 개발 방법론

- 프로그래밍 패러다임 종류
    - 선언형
        - 함수형
    - 명령형
        - 객체지향형
        - 절차지향형
    

### 1.2.1 선언형과 함수형 프로그래밍

- 의미
    - ‘무엇을’ 풀어내는가에 집중하는 패러다임
    - ‘프로그램은 함수로 이루어진 것이다’ 전제
    - 작은 ‘순수 함수’들을 블록처럼 쌓아 로직을 구현하고 ‘고차 함수’를 통해 재사용성을 높인 프로그래밍 패러다임
    - 함수형 프로그래밍은 선언형 패러다임의 일종
- 예시
    - reduce() : 배열만 받아서 누적한 결괏값을 반환하는 순수 함수

- 순수함수
    - 출력이 입력에만 의존하는 것을 의미

- 고차함수
    - 의미
        - 함수가 함수를 값처럼 매개변수로 받아 로직을 생성할 수 있는 것
    - 특징
        - 일급객체 특징
            - 변수나 메서드에 함수를 할당
            - 함수 안에 함수를 매개변수로 담음
            - 함수가 함수를 반환

### 1.2.2 객체지향 프로그래밍

- 의미
    - 객체들의 집합으로 프로그램의 상호 작용 표현
    - 데이터를 객체로 취급
    - 객체 내부에 선언된 메서드를 활용하는 방식
- 단점
    - 설계에 많은 시간 소요
    - 처리 속도가 상대적으로 느림

- 특징
    - 추상화
        - 복잡한 시스템으로부터 핵심적인 개념을 간추림
    - 캡슐화
        - 객체의 속성과 메서드를 하나로 묶고 일부를 외부에 감추어 은닉
    - 상속성
        - 상위 클래스의 특성을 하위 클래스가 이어받는 것
        - 재사용하거나 추가, 확장하는 것
        - 유지 보수성 측면에서 중요
    - 다형성
        - 하나의 메서드나 클래스가 다양한 방법으로 동작하는 것
        - 오버로딩과 오버라이딩 존재

### ⚠️오버로딩 vs 오버라이딩

- 오버로딩
    - 같은 이름을 가진 메서드를 여러 개 두는 것
    - 메서드의 타입, 매개변수의 유형, 개수 등으로 여러 개를 둘 수 있음
    - 런타임 중에 발생하는 ‘정적’ 다형성
- 오버라이딩
    - 상위 클래스부터 상속받은 메서드를 하위 클래스가 재정의
    - 런타임 중에 발생하는 ‘동적’ 다형성

### ⚠️ 설계원칙 (SOLID)

- **단일 책임 원칙** (SRP, Single Responsibility Principle)
    - 각각 하나의 책임만 가져야 하는 원칙
- **개방-폐쇄 원칙** (OCP, Open Closed Principle)
    - 유지 보수 사항이 생긴다면, 코드를 쉽게 확장할 수 있도록 해야 하는 원칙
    - 유지 보수 사항이 생긴다면, 수정할 때는 닫혀 있어야 한다는 원칙
- **리스코프 치환 원칙** (LSP, Liskov Subsituation Principle)
    - 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 하는 원칙
    - 부모 객체에 자식 객체를 넣어도 시스템이 문제없이 돌아가게 만드는 것
- **인터페이스 분리 원칙** (ISP, Interface Segregation Principle)
    - 하나의 일반적인 인터페이스보다 구체적인 여러 개의 인터페이스를 만들어야 하는 원칙
- **의존 역전 원칙** (DIP, Dependency Inversion Principle)
    - 자신보다 변하기 쉬운 것에 의존하던 것을 추상화된 인터페이스나 상위 클래스를 두어 변하기 쉬운 것의 변화에 영향받지 않게 하는 원칙

### 1.2.3 절차형 프로그래밍

- 의미
    - 로직이 수행되어야 할 연속적인 계산 과정으로 이루어져 있음
    - 일이 진행되는 방식으로 그저 코드를 구현

- 장점
    - 코드의 가독성이 좋음
    - 실행속도가 빠름
    - 계산이 많은 작업 등에 쓰임

- 단점
    - 모듈화하기가 어려움
    - 유지 보수성 떨어짐

- 예시
    - 포트란
        - 대기 과학 관련 연산 작업
        - 머신 러닝의 배치 작업
